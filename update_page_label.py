from pypdf import PdfMerger
from pypdf.generic import ArrayObject, DictionaryObject, NameObject, NumberObject


class UpdatePageLabel:
    def __init__(self, input_pdfs, final_page_labels) -> None:
        self.nums_array = ArrayObject()
    
        n = len(final_page_labels)//2-1
        cnt = 0
        for i in range(n):
            self.add_page_label(cnt, '/S', final_page_labels[2*i])
            cnt += final_page_labels[2*i+1]
        self.add_page_label(cnt, '/S', final_page_labels[2*n])
        
        self.merger = PdfMerger()
        for fn in input_pdfs:
            self.merger.append(fileobj=open(fn, 'rb'))
        
        root_obj = self.merger.output._root_object
        page_labels = DictionaryObject()
        page_numbers = DictionaryObject()
        page_numbers.update({NameObject("/Nums"): self.nums_array})
        page_labels.update({NameObject("/PageLabels"): page_numbers})
        root_obj.update(page_labels)

        self.merger.set_page_mode("/UseOutlines")

    def add_metadata(self, metadata):
        self.merger.add_metadata(metadata)

    def write(self, fn):
        self.merger.write(fileobj=open(fn, 'wb'))
        self.merger.close()

    def add_page_label(self, n, k, v):
        self.nums_array.append(NumberObject(n))
        number_type = DictionaryObject({NameObject(k): NameObject(v)})
        self.nums_array.append(number_type)


if __name__ == '__main__':

    # PLEASE UPDATE THE FOLLOWING 4 VARIABLES
    # only keep one element in the __input_pdfs__ list below if you do not want
    # to merge the cover
    input_pdfs = ['cover.pdf', 'main.pdf']
    output_pdf = 'output.pdf'
    metadata = {
        '/Author': '',
        '/Title': '',
        '/Subject': 'TU Delft PhD Dissertation',
        '/Keywords': '',
        '/Creator': 'LaTeX'
    }

    final_page_labels = ['/A', 2, '/r', 10, '/D', 100]
    # __final_page_labels__ is a 2n-list indicating the page labels in the 
    # final PDF, including the cover page added by TU Repository
    # final_page_labels[2*i] is a page label style marker from the list below
    # https://github.com/py-pdf/pypdf/blob/b0d92b300edd3d9eef033ad76992e24941318d8d/pypdf/constants.py
    #   "/D": Decimal arabics
    #   "/r": Lowercase roman numbers
    #   "/R": Uppercase roman numbers
    #   "/a": Lowercase letters
    #   "/A": Uppercase letters
    # final_page_labels[2*i+1] is the number of pages in this style
    # ```final_page_labels = ['/A', 2, '/r', 10, 'D', 100]``` means:
    #   2 cover pages (a TU Repository cover and a author's cover) labeled by
    # letters "A--B".
    #   10 front matter pages (title page, table of contents, etc.) labeled by
    # roman numbers "i--x"
    #   100 body matter pages labeled by decimal arabics "1--100".
    # The last page quantity 100 can be replaced with any number, i.e. it's ok
    # to use:
    # ```final_page_labels = ['/A', 2, '/r', 10, 'D', -1]```
    # If the author's cover is not included, use
    # ```final_page_labels = ['/A', 1, '/r', 10, 'D', -1]```
    # The ```final_page_labels``` list can be generated by reading the input
    # PDFs, which is not implemented here.

    ## TL;DR
    '''
    # I have my own cover and <n> front matter pages.
    input_pdfs = ['cover.pdf', 'main.pdf']
    output_pdf = 'output.pdf'
    metadata = {
        '/Author': '<my name>',
        '/Title': '<my title>',
        '/Subject': 'TU Delft PhD Dissertation',
        '/Keywords': '<my keywords>',
        '/Creator': 'LaTeX'
    }
    final_page_labels = ['/A', 2, '/r', <n>, '/D', 100]
    #'''

    '''
    # I have <n> front matter pages but no cover.
    input_pdfs = ['main.pdf']
    output_pdf = 'output.pdf'
    metadata = {
        '/Author': '<my name>',
        '/Title': '<my title>',
        '/Subject': 'TU Delft PhD Dissertation',
        '/Keywords': '<my keywords>',
        '/Creator': 'LaTeX'
    }
    final_page_labels = ['/A', 1, '/r', <n>, '/D', 100]
    #'''


    # update the labels
    upl = UpdatePageLabel(input_pdfs, final_page_labels)
    upl.add_metadata(metadata)
    upl.write(output_pdf)
